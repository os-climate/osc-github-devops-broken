---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "🏷️ Latest Semantic Tag"

outputs:
  TAG:
    # A leading non-numeric "v" character will be stripped
    description: "Return the latest semantic tag from repository"
    value: ${{ steps.parse-tags.outputs.tag }}
  VTAG:
    # A leading non-numeric "v" character will be stripped
    description: "The incremented semantic tag [with prefix] e.g. v1.2.3"
    value: ${{ steps.increment.outputs.tag }}
  INVALID:
    description: "Flag set true if no semantic tags found"
    value: ${{ steps.parse-tags.outputs.invalid }}

runs:
  using: "composite"
  steps:
    - name: "Fetch tags"
      shell: bash
      if: startsWith(github.ref, 'refs/tags/') != true
      # Don't fetch tags if a tag was pushed, it will result in an error, e.g.
      # Fetching tags...
      # From https://github.com/os-climate/osc-github-devops
      #  * [new branch]      main       -> origin/main
      #  * [new tag]         v0.0.0     -> v0.0.0
      #  ! [rejected]        v0.0.2     -> v0.0.2  (would clobber existing tag)
      run: |
        # Workaround for: https://github.com/actions/checkout/issues/1471
        echo "Fetching tags..."
        git fetch --tags

    - name: "Parse tags"
      id: parse-tags
      shell: bash
      run: |
        # Extract and report latest semantic tag

        #SHELLCODESTART

        # Allows for testing from a local shell
        if [ -z "$GITHUB_OUTPUT" ]; then
          echo "Running from a shell, NOT workflow"
          export GITHUB_OUTPUT="/dev/null"
        fi

        # Regular expression to match semantic tag
        PATTERN="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"

        TAG=$(git tag -l --sort=committerdate | grep -o '?*.*.*' | sort -r | head -1 || true)

        # If present, strip the leading "v" character
        if [[ "$TAG" == v* ]]; then
          TAG="${TAG:1}"
        fi

        # Validate supplied (and parsed) tag
        if ! [[ "$TAG" =~ $PATTERN ]]; then
          echo "No valid semantic tags were found"
          echo "invalid=true" >> $GITHUB_OUTPUT
          # Set a placeholder value for the tag
          TAG="0.0.0"
        else
          echo "Numeric value: $TAG"
          echo "invalid=false" >> $GITHUB_OUTPUT
        fi
        VTAG="v$TAG"

        echo "Tag: $TAG [v$TAG]"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "vtag=${VTAG}" >> $GITHUB_OUTPUT

        #SHELLCODEEND
