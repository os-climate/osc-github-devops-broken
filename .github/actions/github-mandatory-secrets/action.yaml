---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "üõ†Ô∏è Check/Verify GitHub Secrets"
description: "Checks/verifies access to required secrets"
# These need to be setup at either the ORG or REPO level
# (i.e. available to workflows in this repository)
# e.g. PyPI API Keys required for package publishing
# (when trusted publishing has not yet been setup)

inputs:
  PYPI_GITHUB_DEVELOPMENT:
    description: "Token needed to publish packages to: test.pypi.org"
    required: true
  PYPI_GITHUB_PRODUCTION:
    description: "Token needed to publish packages to: pypi.org"
    required: true

outputs:
  PRESENT:
    description: "Returns true if the labels exist"
    value: ${{ steps.github.outputs.present }}

runs:
  using: "composite"
  steps:
    - id: github
      env:
        PYPI_GITHUB_DEVELOPMENT: ${{ inputs.pypi_github_development }}
        PYPI_GITHUB_PRODUCTION: ${{ inputs.pypi_github_production }}
      shell: bash
      run: |
        # Check for presence of required secrets

        #SHELLCODESTART

        # Allows for testing from a local shell
        if [ -z "$GITHUB_OUTPUT" ]; then
          echo "Running from a shell, NOT workflow"
          export GITHUB_OUTPUT="/dev/null"
        fi

        # Initial assumption is that secrets do NOT exist
        PRESENT="false"

        # Define the secrets we need to verify

        # Check/validate mandatory secrets/variables

        # File format is: [SECRET NAME] [SHA1SUM]
        TMPFILE=$(mktemp -p /tmp --suffix "-secrets.txt")
        cat << EOF > "$TMPFILE"
        PYPI_GITHUB_DEVELOPMENT 19fc83e3c621347f85573fa0ea9dffff6542d3e3
        PYPI_GITHUB_PRODUCTION dcfaee96a60c6f8e44c870ed7058fe55d8b11fc6
        EOF

        # Iterate over secrets and validate checksums against those stored in GitHub
        ERRORS="false"
        while read -r LINE; do
          STRING_ARRAY=($LINE)
          SECRET=${STRING_ARRAY[0]}
          EXPECTED=${STRING_ARRAY[1]}
          if [ "$SECRET" == "PYPI_GITHUB_DEVELOPMENT" ]; then
            CHECKSUM=$(echo ${{ env.PYPI_GITHUB_DEVELOPMENT }} | sha1sum | awk '{print $1}')
          elif [ "$SECRET" == "PYPI_GITHUB_PRODUCTION" ]; then
            CHECKSUM=$(echo ${{ env.PYPI_GITHUB_PRODUCTION }} | sha1sum | awk '{print $1}')
          else
            echo "Unexpected secret $SECRET was NOT found in validation table"
            echo "Error: the validation workflow may need updating"
            ERRORS="true"
          fi

          if [ "$EXPECTED" == "$CHECKSUM" ]; then
            echo "Successfully validated secret: $SECRET $CHECKSUM"
          else
            echo "Error: checksum validation failed for $SECRET"
            echo "Got: $CHECKSUM Expected: $EXPECTED"
            ERRORS="true"
          fi
        done < "$TMPFILE"

        if [ "$ERRORS" == true ]; then
          exit 1
        fi

        #SHELLCODEEND
