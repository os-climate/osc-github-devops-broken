---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "ðŸ§± Python Build"
description: "Builds a Python Project"

inputs:
  ARTEFACT_OUTPUT_PATH:
    description: "Output path/location for build artefacts"
    required: false
    default: "dist"
  PURGE_OUTPUT_PATH:
    description: "Purge target artefact path prior to builds"
    required: false
    default: false

outputs:
  DATETIME_STAMP:
    description: "Date/time stamp at build time"
    value: ${{ steps.parameters.outputs.datetime }}
  BUILD_TYPE:
    description: "Build [production|development]"
    value: ${{ steps.perform-build.outputs.publish }}
  SUCCESS:
    description: "Set true if build succeeded"
    value: ${{ steps.perform-build.outputs.success }}

runs:
  using: "composite"
  steps:
    - name: "Set build parameters/variables"
      id: parameters
      shell: bash
      run: |
        # Set build parameters/variables
        echo "Action triggered by: ${GITHUB_TRIGGERING_ACTOR}"
        datetime=$(date +'%Y-%m-%d-%H%M')
        echo "Build date and time stamp: $datetime"
        echo "datetime=$datetime" >> "$GITHUB_ENV"
        echo "datetime=${datetime}" >> "$GITHUB_OUTPUT"

    - name: "Check for dynamic versioning"
      id: dynamic-versioning
      if: github.ref_name == 'main'
      uses: os-climate/osc-github-devops/.github/actions/python-versioning-dynamic@main

    - name: "Generate development build name"
      id: name-development-build
      if: github.ref_name == 'main' &&
        ${{ steps.dynamic-versioning.outputs.dynamic_version }} == 'false'
      uses: os-climate/osc-github-devops/.github/actions/semantic-tag-development@main

    - name: "Export development build name"
      id: export-development-build
      if: github.ref_name == 'main' &&
        ${{ steps.dynamic-versioning.outputs.dynamic_version }} == 'false'
      shell: bash
      run: |
        # Use synthetic build version number
        echo "PDM_BUILD_SCM_VERSION: ${{ steps.name-development-build.outputs.vtag }}"
        echo "PDM_BUILD_SCM_VERSION=${{ steps.name-development-build.outputs.vtag }}" >> $GITHUB_ENV
        echo $PDM_BUILD_SCM_VERSION > version.txt

    - name: "Enumerate current tag"
      id: current-tag
      if: github.ref_name == 'main' &&
        ${{ steps.dynamic-versioning.outputs.dynamic }} == 'false'
      uses: os-climate/osc-github-devops/.github/actions/repository-tags-fetch@main

    - name: "Patch version in pyproject.toml"
      id: patch-pyproject-version
      if: github.ref_name == 'main' &&
        ${{ steps.dynamic-versioning.outputs.dynamic }} == 'false'
      uses: os-climate/osc-github-devops/.github/actions/python-versioning-patch@main
      with:
        current: ${{ steps.current-tag.outputs.vtag }}
        target: ${{ env.PDM_BUILD_SCM_VERSION }}

    - name: "Check target/path for build products"
      id: check-target
      shell: bash
      run: |
        # Check target path for build products
        if [ ! -d ${{ inputs.artefact_output_path }} ]; then
          if (mkdir -p ${{ inputs.artefact_output_path }}); then
            echo "Created target path for build products: ${{ inputs.artefact_output_path }}"
          else
            echo "Failed to create directory for build products: ${{ inputs.artefact_output_path }}"
            exit 1
          fi
        else
          echo "Specified directory for artefacts is valid"
          FILES=$(ls ${{ inputs.artefact_output_path }} | wc -l)
          if [ "$FILES" -gt 0 ]; then
            echo "target_populated=true" >> "$GITHUB_OUTPUT"
            echo "Content already exists in target directory:"
            ls -l ${{ inputs.artefact_output_path }}
          fi
        fi

    - name: "Clean build target directory"
      id: clean-target
      shell: bash
      if: steps.check-target.outputs.target_populated == 'true' && inputs.purge_output_path == 'true'
      run: |
        # Clean target path for build products
        echo "Running command: rm -f ${{ inputs.artefact_output_path }}/*"
        rm -f "${{ inputs.artefact_output_path }}/*"

    - name: "Perform Python project build"
      id: perform-build
      shell: bash
      run: |
        # Perform package build
        python -m pip install -q --upgrade pip
        if [ -f pyproject.toml ]; then
          echo "Found file: pyproject.toml"
          echo "Building with command: pdm build --dest ${{ inputs.artefact_output_path }}"
          pdm build --dest ${{ inputs.artefact_output_path }}
        elif [ -f tox.ini ]; then
          echo "Found TOX configuration file: tox.ini"
          echo "Attempting to install TOX..."
          pip install -q --upgrade tox tox-gh-actions
          echo "Attempting build with: tox -e build"
          echo "WARNING: assumes build artefact path is valid"
          tox -e build
        else
          echo "Neither file found: tox.ini/pyproject.toml"
          echo "Attempting build with: python -m build"
          pip -q --upgrade install build
          python -m build --outdir ${{ inputs.artefact_output_path }}
        fi

        # Set build type based on artefact naming
        if test -n "$(find ${{ inputs.artefact_output_path }} -maxdepth 1 -name '**.dev*' -print -quit)"; then
          echo "Artefact naming indicates development build"
          echo "build_type=development" >> "$GITHUB_ENV"
          echo "build_type=development" >> "$GITHUB_OUTPUT"
        else
          echo "build_type=production" >> "$GITHUB_ENV"
          echo "build_type=production" >> "$GITHUB_OUTPUT"
        fi
        echo "Build succeeded"
        echo "success=true" >> "$GITHUB_OUTPUT"
