---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "ðŸ“¦ Publish Python Package"

inputs:
  INSTANCE_URL:
    description: "URL of the Python package repository"
    default: "https://pypi.org/project"
    required: false
  ARTEFACTS_DIR:
    description: "URL of the Python package repository"
    default: "dist"
    required: false
  VERIFY_METADATA:
    description: "URL of the Python package repository"
    default: "true"
    #Â Set this to true if twine has NOT already been used to validate packages
    required: false
  VERBOSE:
    description: "Useful for debugging failed publishing"
    default: "false"
    required: false

outputs:
  SUCCESS:
    description: "Set true when publishing succeeds"

runs:
  using: "composite"
  steps:
    - name: "Download build artefacts"
      uses: actions/download-artifact@v4
      if: env.PYPI_PUBLISHING == 'true'
      with:
        name: ${{ github.ref_name }}
        path: ${{ env.BUILD_ARTEFACTS }}

    - name: "Manicure build artefacts"
      id: files
      run: |
        # Manicure build artefacts
        if [ ! -d ${{ env.BUILD_ARTEFACTS }} ]; then
          echo "Early exit; build artefacts path NOT found: ${{ env.BUILD_ARTEFACTS }}"
          exit 0
        fi

        if [ -f ${{ env.BUILD_ARTEFACTS }}/buildvars.txt ]; then
          rm ${{ env.BUILD_ARTEFACTS }}/buildvars.txt
        else
          echo "No buildvars.txt file to purge"
        fi

        # Remove outputs related to SigStore signing
        if test -n "$(find ${{ env.BUILD_ARTEFACTS }} -maxdepth 1 -name '**.sigstore*' -print -quit)"
        then
          echo "Found SigStore signing artefacts to purge"
          rm ${{ env.BUILD_ARTEFACTS }}/*.sigstore*
        else
          echo "No SigStore signing artefacts to purge"
        fi

    - name: "Check PROJECT in Test PyPI"
      id: testpypi-project-url-check
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/url-validity-check@main
      with:
        prefix: "https://test.pypi.org/project"
        # Use project name, e.g. "/ITR"
        string: "/${{ needs.github-workflow-metadata.outputs.repository }}"
        suffix: "/"

    - name: "Check RELEASE in Test PyPI"
      id: testpypi-release-url-check
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/url-validity-check@main
      with:
        prefix: "https://test.pypi.org/project"
        # Use project name, e.g. "/ITR"
        string: "/${{ needs.github-workflow-metadata.outputs.repository }}"
        suffix: "/${{ needs.python-build.outputs.current-tag }}/"

    - name: "Publish to Test PyPI [Trusted Publishing]"
      uses: pypa/gh-action-pypi-publish@release/v1
      #Â Primary/default method uses trusted publishing
      # yamllint disable-line rule:line-length
      if: steps.testpypi-project-url-check.outputs.valid == 'true' && steps.testpypi-release-url-check.outputs.valid == 'false'
      with:
        repository-url: https://test.pypi.org/legacy/
        #Â Show checksum values
        print-hash: true
        packages-dir: ${{ env.BUILD_ARTEFACTS }}
        #Â We already validate earlier in the pipeline
        verify-metadata: false
        # Test releases are always debugged
        verbose: true

    - name: "Publish to Test PyPI [Fallback: API Key]"
      uses: pypa/gh-action-pypi-publish@release/v1
      #Â Fallback method uses static organisation credentials
      # Used initially when trusted publishing is unavailable
      if: steps.testpypi-project-url-check.outputs.valid == 'false'
      with:
        repository-url: https://test.pypi.org/legacy/
        #Â Show checksum values
        print-hash: true
        packages-dir: ${{ env.BUILD_ARTEFACTS }}
        #Â We already validate earlier in the pipeline
        verify-metadata: false
        # Test releases are always debugged
        verbose: true
        # Organisation secret/variable
        # Defined/stored in 1Password
        password: ${{ secrets.PYPI_GITHUB_DEVELOPMENT }}
