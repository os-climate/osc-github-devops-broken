---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "ðŸ“¦ Release to GitHub"
# Packages a development/production release on GitHub"

on:
  workflow_call:
    inputs:
      PRERELEASE:
        description: "Mark release as pre-release/development version"
        type: boolean
        required: false
        default: false
      DEVTAG:
        # Force use of this tag/name for release
        description: "Semantic tag for release/build"
        type: string
        required: false

# Two release types supported, based on conditions

###Â Development Release
# github.event.pull_request.merged == true &&
# startsWith(github.ref, 'refs/tags/') != 'true'
#Â devtag: ${{ needs.tagging.outputs.dev_tag }}

###Â Production Release
# On merge of tag push, create a production release
# if: github.event.pull_request.merged == true && startsWith(github.ref, 'refs/tags/')
# tag: ${{ github.ref_name }}

jobs:
  github-release:
    name: "GitHub Release"
    runs-on: "ubuntu-latest"
    permissions:
      contents: write
    env:
      tag: ${{ github.event.inputs.tag }}
    steps:
      - name: "â¬‡ Download build artefacts"
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.ref_name }}
          path: ${{ env.BUILD_ARTEFACTS }}

      - name: "DEVELOPMENT release"
        uses: softprops/action-gh-release@v2
        if:
          # Runs when a pre-release requested, development tag supplied,
          #  pull request merged and release NOT triggered by a tag push
          inputs.PRERELEASE &&
          inputs.DEVTAG != '' &&
          github.event.pull_request.merged == true &&
          !startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ inputs.PRERELEASE }}
          # ToDo: DO WE WANT A DATE/TIME STAMP HERE?
          tag_name: ${{ inputs.devtag }}
          name: "Development/build: ${{ inputs.devtag }}"
          # body_path: ${{ github.workspace }}/CHANGELOG.rst
          files: |
            ${{ env.BUILD_ARTEFACTS }}/*.tar.gz
            ${{ env.BUILD_ARTEFACTS }}/*.whl
            ${{ env.BUILD_ARTEFACTS }}/*.sigstore*

      - name: "Check version string in pyproject.toml matches tag push"
        shell: bash
        run: |
          echo "ToDo: NOT IMPLEMENTED YET"

      #Â Tag pushes can be production or development releases
      - name: "Determine release type"
        if:
          # Run production release on merge of tag push
          github.event.pull_request.merged == true &&
          startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          # Determine release type
          echo "ToDo: Determine release type"

      - name: "PRODUCTION Release"
        uses: softprops/action-gh-release@v2
        if:
          # Run production release on merge of tag push
          github.event.pull_request.merged == true &&
          startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          tag_name: ${{ github.ref_name }}
          name: "Release/build: ${{ github.ref_name }}"
          # body_path: ${{ github.workspace }}/CHANGELOG.rst
          files: |
            ${{ env.BUILD_ARTEFACTS }}/*.tar.gz
            ${{ env.BUILD_ARTEFACTS }}/*.whl
            ${{ env.BUILD_ARTEFACTS }}/*.sigstore*
