---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "🏷️ Repository Tagging"
# Enumerate current tag, generate development/production tags, create initial tag

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      CREATE_MISSING:
        description: "Create an initial tag if none found in repository"
        type: boolean
        required: false
        default: false

    outputs:
      CURRENT_TAG:
        description: "Existing tag from repository"
        value: ${{ jobs.tagging.outputs.current_tag }}
      INVALID_TAG:
        description: "Flags if the current repository tag is NOT semantiv"
        value: ${{ jobs.tagging.outputs.invalid_tag }}
      DEVELOPMENT_TAG:
        description: "Semantic tag for development releases/builds"
        value: ${{ jobs.tagging.outputs.development_tag }}
      PRODUCTION_TAG:
        description: "Semantic tag for production releases/builds"
        value: ${{ jobs.tagging.outputs.production_tag }}
      PRE_RELEASE:
        description: "Set true if test/development release"
        value: ${{ jobs.tagging.outputs.pre_release }}
      BUILD_TAG:
        description: "Semantic tag for this release/build"
        value: ${{ jobs.tagging.outputs.build_tag }}

jobs:
  tagging:
    name: "Build Naming"
    runs-on: ubuntu-latest
    outputs:
      current_tag: ${{ steps.repo-tags.outputs.current_tag }}
      invalid_tag: ${{ steps.repo-tags.outputs.invalid_tag }}
      development_tag: ${{ steps.development-tag.outputs.development_tag }}
      production_tag: ${{ steps.production-tag.outputs.production_tag }}
      pre_release: ${{ steps.this-build.outputs.pre_release }}
      build_tag: ${{ steps.this-build.outputs.build_tag }}

    steps:
      - name: "Retrieve/verify tags"
        id: repo-tags
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/semantic-tag-fetch@main

      - name: "Generate DEVELOPMENT build/tag"
        id: development-tag
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/semantic-tag-development@main
        with:
          tag: ${{ steps.repo-tags.outputs.vtag }}

      - name: "Generate PRODUCTION build/tag"
        id: production-tag
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/semantic-tag-production@main
        with:
          tag: ${{ steps.repo-tags.outputs.vtag }}

      # ToDo
      #  1. Add type based on labels in pull request
      #  2. Add type based on strings in commit message
      - name: "Define this build/tag"
        id: this-build
        shell: bash
        run: |
          # Flag build/release type
          if [ "$GITHUB_REF_NAME" == "main" ] &&
             [ "$GITHUB_REF_TYPE" == "branch" ] &&
             [ "$GITHUB_EVENT_NAME" == "push" ]; then
            PRE_RELEASE="true"
            BUILD_TAG=${{ steps.development-tag.outputs.vtag }}
          elif [ "$GITHUB_REF_NAME" == "main" ] &&
           [ "$GITHUB_REF_TYPE" == "branch" ] &&
           [ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]; then
            PRE_RELEASE="true"
            BUILD_TAG=${{ steps.development-tag.outputs.vtag }}
          else
            PRE_RELEASE="false"
            BUILD_TAG=${{ steps.production-tag.outputs.vtag }}
          fi
          echo "pre_release=$PRE_RELEASE"
          echo "pre_release=$PRE_RELEASE" >> "$GITHUB_OUTPUT"
          echo "build_tag=$BUILD_TAG"
          echo "build_tag=$BUILD_TAG" >> "$GITHUB_OUTPUT"

      # Only runs if no tags are found, pushes an initial v0.0.0
      - name: "Create initial v0.0.0 tag"
        id: initial-tag
        if: steps.repo-tags.outputs.invalid == 'true' &&
          inputs.CREATE_MISSING == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag_name: v0.0.0
